{
  "service": {
    "service": "my-shop",
    "serviceObject": {
      "name": "my-shop"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "memorySize": 256,
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Scan",
            "s3:PutObject",
            "s3:GetSignedUrl",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:130956142913:table/product",
            "arn:aws:s3:::emmauploaded/uploaded/*"
          ]
        }
      ],
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetProductsListLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/my-shop-dev-getProductsList"
            }
          },
          "GetProductsByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/my-shop-dev-getProductsById"
            }
          },
          "CreateProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/my-shop-dev-createProduct"
            }
          },
          "ImportProductsFileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/my-shop-dev-importProductsFile"
            }
          },
          "ImportFileParserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/my-shop-dev-importFileParser"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "my-shop",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-shop-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-shop-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "my-shop",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetProductsListLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/my-shop/dev/1685464082295-2023-05-30T16:28:02.295Z/getProductsList.zip"
              },
              "Handler": "handlers.getProductsList",
              "Runtime": "nodejs14.x",
              "FunctionName": "my-shop-dev-getProductsList",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PRODUCTS_TABLE": "product",
                  "STOCK_TABLE": "stock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductsListLogGroup"
            ]
          },
          "GetProductsByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/my-shop/dev/1685464082295-2023-05-30T16:28:02.295Z/getProductsById.zip"
              },
              "Handler": "handlers.getProductsById",
              "Runtime": "nodejs14.x",
              "FunctionName": "my-shop-dev-getProductsById",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PRODUCTS_TABLE": "product",
                  "STOCK_TABLE": "stock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductsByIdLogGroup"
            ]
          },
          "CreateProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/my-shop/dev/1685464082295-2023-05-30T16:28:02.295Z/createProduct.zip"
              },
              "Handler": "handlers.createProduct",
              "Runtime": "nodejs14.x",
              "FunctionName": "my-shop-dev-createProduct",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PRODUCTS_TABLE": "product",
                  "STOCK_TABLE": "stock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateProductLogGroup"
            ]
          },
          "ImportProductsFileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/my-shop/dev/1685464082295-2023-05-30T16:28:02.295Z/importProductsFile.zip"
              },
              "Handler": "handlers.importProductsFile",
              "Runtime": "nodejs14.x",
              "FunctionName": "my-shop-dev-importProductsFile",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PRODUCTS_TABLE": "product",
                  "STOCK_TABLE": "stock"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ImportProductsFileLogGroup"
            ]
          },
          "ImportFileParserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/my-shop/dev/1685464082295-2023-05-30T16:28:02.295Z/importFileParser.zip"
              },
              "Handler": "handlers.importFileParser",
              "Runtime": "nodejs14.x",
              "FunctionName": "my-shop-dev-importFileParser",
              "MemorySize": 256,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ImportFileParserLogGroup"
            ]
          },
          "ImportProductsFileLambdaVersion1yJvgANDfqhm0N4yxI7pwsM9xz4MuVQJs2xWP9YWm8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ImportProductsFileLambdaFunction"
              },
              "CodeSha256": "zhoulE29sbkGm4sbCLJu7Q9IXAc5re6mwemrriuM6vI="
            }
          },
          "GetProductsListLambdaVersionxh44CH8j5zuFF8MhabYsRP25zxn5N4Ng43DZgBjac": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductsListLambdaFunction"
              },
              "CodeSha256": "zhoulE29sbkGm4sbCLJu7Q9IXAc5re6mwemrriuM6vI="
            }
          },
          "CreateProductLambdaVersionvos9Mu6ZoebPW21dulCAoYH6vqtrPbhe5FXSAdkAlY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateProductLambdaFunction"
              },
              "CodeSha256": "zhoulE29sbkGm4sbCLJu7Q9IXAc5re6mwemrriuM6vI="
            }
          },
          "GetProductsByIdLambdaVersionUacaypvox3fmB6fsaHbrdnPX8LWaw6VHd8kkaNClPkg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductsByIdLambdaFunction"
              },
              "CodeSha256": "zhoulE29sbkGm4sbCLJu7Q9IXAc5re6mwemrriuM6vI="
            }
          },
          "ImportFileParserLambdaVersionyWDXQZTnlCeBNmNQXBfFv2v8qwqwsdA62NbbBie4zM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ImportFileParserLambdaFunction"
              },
              "CodeSha256": "zhoulE29sbkGm4sbCLJu7Q9IXAc5re6mwemrriuM6vI="
            }
          },
          "S3BucketEmmauploaded": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "emmauploaded",
              "NotificationConfiguration": {
                "LambdaConfigurations": [
                  {
                    "Event": "s3:ObjectCreated:*",
                    "Function": {
                      "Fn::GetAtt": [
                        "ImportFileParserLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Filter": {
                      "S3Key": {
                        "Rules": [
                          {
                            "Name": "prefix",
                            "Value": "uploaded/"
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "ImportFileParserLambdaPermissionEmmauploadedS3"
            ]
          },
          "ImportFileParserLambdaPermissionEmmauploadedS3": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ImportFileParserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "s3.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":s3:::emmauploaded"
                  ]
                ]
              },
              "SourceAccount": {
                "Ref": "AWS::AccountId"
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-my-shop",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProducts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "products",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProductsProductidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "PathPart": "{productId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceImport": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "import",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProductsListLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetProductsListLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsProductidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductsProductidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProductsByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetProductsByIdLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodImportGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.name": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceImport"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ImportProductsFileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayMyshopRequestValidator"
              }
            },
            "DependsOn": [
              "ImportProductsFileLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMyshopRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "my-shop-dev | Validate request body and querystring parameters"
            }
          },
          "ApiGatewayDeployment1685464070085": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodProductsGet",
              "ApiGatewayMethodProductsProductidVarGet",
              "ApiGatewayMethodProductsPost",
              "ApiGatewayMethodImportGet"
            ]
          },
          "GetProductsListLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductsListLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProductsByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductsByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ImportProductsFileLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ImportProductsFileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-my-shop-dev-ServerlessDeploymentBucketName"
            }
          },
          "ImportProductsFileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ImportProductsFileLambdaVersion1yJvgANDfqhm0N4yxI7pwsM9xz4MuVQJs2xWP9YWm8"
            },
            "Export": {
              "Name": "sls-my-shop-dev-ImportProductsFileLambdaFunctionQualifiedArn"
            }
          },
          "GetProductsListLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductsListLambdaVersionxh44CH8j5zuFF8MhabYsRP25zxn5N4Ng43DZgBjac"
            },
            "Export": {
              "Name": "sls-my-shop-dev-GetProductsListLambdaFunctionQualifiedArn"
            }
          },
          "CreateProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateProductLambdaVersionvos9Mu6ZoebPW21dulCAoYH6vqtrPbhe5FXSAdkAlY"
            },
            "Export": {
              "Name": "sls-my-shop-dev-CreateProductLambdaFunctionQualifiedArn"
            }
          },
          "GetProductsByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductsByIdLambdaVersionUacaypvox3fmB6fsaHbrdnPX8LWaw6VHd8kkaNClPkg"
            },
            "Export": {
              "Name": "sls-my-shop-dev-GetProductsByIdLambdaFunctionQualifiedArn"
            }
          },
          "ImportFileParserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ImportFileParserLambdaVersionyWDXQZTnlCeBNmNQXBfFv2v8qwqwsdA62NbbBie4zM"
            },
            "Export": {
              "Name": "sls-my-shop-dev-ImportFileParserLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-my-shop-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-webpack"
    ],
    "pluginsData": {},
    "functions": {
      "getProductsList": {
        "handler": "handlers.getProductsList",
        "events": [
          {
            "http": {
              "path": "products",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "PRODUCTS_TABLE": "product",
          "STOCK_TABLE": "stock"
        },
        "name": "my-shop-dev-getProductsList",
        "package": {
          "artifact": ".serverless/getProductsList.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetProductsListLambdaVersionxh44CH8j5zuFF8MhabYsRP25zxn5N4Ng43DZgBjac"
      },
      "getProductsById": {
        "handler": "handlers.getProductsById",
        "events": [
          {
            "http": {
              "path": "products/{productId}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "PRODUCTS_TABLE": "product",
          "STOCK_TABLE": "stock"
        },
        "name": "my-shop-dev-getProductsById",
        "package": {
          "artifact": ".serverless/getProductsById.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetProductsByIdLambdaVersionUacaypvox3fmB6fsaHbrdnPX8LWaw6VHd8kkaNClPkg"
      },
      "createProduct": {
        "handler": "handlers.createProduct",
        "events": [
          {
            "http": {
              "path": "products",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "PRODUCTS_TABLE": "product",
          "STOCK_TABLE": "stock"
        },
        "name": "my-shop-dev-createProduct",
        "package": {
          "artifact": ".serverless/createProduct.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateProductLambdaVersionvos9Mu6ZoebPW21dulCAoYH6vqtrPbhe5FXSAdkAlY"
      },
      "importProductsFile": {
        "handler": "handlers.importProductsFile",
        "events": [
          {
            "http": {
              "path": "import",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.querystring.name": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "PRODUCTS_TABLE": "product",
          "STOCK_TABLE": "stock"
        },
        "name": "my-shop-dev-importProductsFile",
        "package": {
          "artifact": ".serverless/importProductsFile.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ImportProductsFileLambdaVersion1yJvgANDfqhm0N4yxI7pwsM9xz4MuVQJs2xWP9YWm8"
      },
      "importFileParser": {
        "handler": "handlers.importFileParser",
        "events": [
          {
            "s3": {
              "bucket": "emmauploaded",
              "event": "s3:ObjectCreated:*",
              "rules": [
                {
                  "prefix": "uploaded/"
                }
              ]
            }
          }
        ],
        "name": "my-shop-dev-importFileParser",
        "package": {
          "artifact": ".serverless/importFileParser.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ImportFileParserLambdaVersionyWDXQZTnlCeBNmNQXBfFv2v8qwqwsdA62NbbBie4zM"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "my-shop",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "package": {
        "individually": true,
        "artifactsS3KeyDirname": "serverless/my-shop/dev/code-artifacts",
        "artifactDirectoryName": "serverless/my-shop/dev/1685464082295-2023-05-30T16:28:02.295Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/my-shop/dev/1685464082295-2023-05-30T16:28:02.295Z",
    "artifact": ""
  }
}